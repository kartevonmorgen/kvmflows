services:
  db:
    container_name: db 
    image: postgres:latest
    expose:
      - 5432
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=REMOVED_SECRET
    volumes:
      - ./init_pg_dbs.sql:/docker-entrypoint-initdb.d/init_pg_dbs.sql
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  x-api-service-base: &api-service-base
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    networks:
      - app_network
    volumes:
      - ./config.yaml:/app/config.yaml
    environment:
      - MAILGUN_API_KEY=${MAILGUN_API_KEY}
      - TEST_EMAIL_RECIPIENT=${TEST_EMAIL_RECIPIENT}
      - DB_PASSWORD=${DB_PASSWORD}
    deploy:
      replicas: 0
  
  api:
    <<: *api-service-base
    container_name: api_container
    ports:
      - "7921:7921"
    command: poetry run python /app/src/kvmflows/apis/server.py
    depends_on:
      db:
        condition: service_healthy
  
  # syncronizer_all:
  #   <<: *api-service-base
  #   container_name: sync_all_entries_container
  #   command: poetry run python /app/src/kvmflows/crons/sync_all_entries.py

  syncronizer_recent_entries:
    <<: *api-service-base
    container_name: sync_recently_changed_entries_container
    command: poetry run python /app/src/kvmflows/crons/sync_recent_entries.py
    depends_on:
      db:
        condition: service_healthy

  subscription_email_service:
    <<: *api-service-base
    container_name: email_container
    command: poetry run python /app/src/kvmflows/crons/send_subscription_emails.py
    depends_on:
      db:
        condition: service_healthy

networks:
  app_network:
    driver: bridge